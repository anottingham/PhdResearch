//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Alastair\Documents\PhD Thesis\CFVM\CaptureFoundry3 - broken\Grammar\Gpf.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {

using System;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GpfParser : Parser {
	public const int
		T__32=1, T__31=2, T__30=3, T__29=4, T__28=5, T__27=6, T__26=7, T__25=8, 
		T__24=9, T__23=10, T__22=11, T__21=12, T__20=13, T__19=14, T__18=15, T__17=16, 
		T__16=17, T__15=18, T__14=19, T__13=20, T__12=21, T__11=22, T__10=23, 
		T__9=24, T__8=25, T__7=26, T__6=27, T__5=28, T__4=29, T__3=30, T__2=31, 
		T__1=32, T__0=33, ID=34, INT=35, HEX=36, COMMENT=37, WS=38;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'-'", "'['", "'*'", "':'", "'('", "'int'", "'<'", 
		"'main'", "'!='", "'<='", "'{'", "'}'", "'case'", "')'", "'.'", "'+'", 
		"'$length'", "'='", "'goto'", "'field'", "';'", "'&&'", "'||'", "'>'", 
		"'protocol'", "'switch'", "'$value'", "'/'", "'=='", "'>='", "'filter'", 
		"'!'", "ID", "INT", "HEX", "COMMENT", "WS"
	};
	public const int
		RULE_program = 0, RULE_main = 1, RULE_filter_def = 2, RULE_int_def = 3, 
		RULE_protocol = 4, RULE_field = 5, RULE_field_range = 6, RULE_field_filter = 7, 
		RULE_switch = 8, RULE_switch_case = 9, RULE_statement = 10, RULE_bool_expr = 11, 
		RULE_bool_and = 12, RULE_bool_not = 13, RULE_bool_atom = 14, RULE_int_expr = 15, 
		RULE_int_sub = 16, RULE_int_mult = 17, RULE_int_div = 18, RULE_int_atom = 19, 
		RULE_comparison = 20, RULE_system_register = 21, RULE_integer = 22;
	public static readonly string[] ruleNames = {
		"program", "main", "filter_def", "int_def", "protocol", "field", "field_range", 
		"field_filter", "switch", "switch_case", "statement", "bool_expr", "bool_and", 
		"bool_not", "bool_atom", "int_expr", "int_sub", "int_mult", "int_div", 
		"int_atom", "comparison", "system_register", "integer"
	};

	public override string GrammarFileName { get { return "Gpf.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GpfParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProtocolContext p;
		public ProtocolContext protocol(int i) {
			return GetRuleContext<ProtocolContext>(i);
		}
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public IReadOnlyList<ProtocolContext> protocol() {
			return GetRuleContexts<ProtocolContext>();
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_program; }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		ProtocolLibrary.Clear();
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 46; _localctx.p = protocol();
				ProtocolLibrary.AddProtocol(_localctx.p.value);
				}
				}
				State = 51;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==26 );
			State = 53; main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public Filter_defContext f;
		public Int_defContext i;
		public Filter_defContext filter_def(int i) {
			return GetRuleContext<Filter_defContext>(i);
		}
		public IReadOnlyList<Filter_defContext> filter_def() {
			return GetRuleContexts<Filter_defContext>();
		}
		public IReadOnlyList<Int_defContext> int_def() {
			return GetRuleContexts<Int_defContext>();
		}
		public Int_defContext int_def(int i) {
			return GetRuleContext<Int_defContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_main; }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(9);
			State = 56; Match(6);
			State = 57; Match(15);
			State = 58; Match(12);
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 65;
				switch (_input.La(1)) {
				case 32:
					{
					State = 59; _localctx.f = filter_def();
					 ProtocolLibrary.Kernels.AddKernel(_localctx.f.value);
					}
					break;
				case 7:
					{
					State = 62; _localctx.i = int_def();
					 ProtocolLibrary.Kernels.AddKernel(_localctx.i.value);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==7 || _la==32 );
			State = 69; Match(13);
			ProtocolLibrary.GenerateProgram();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_defContext : ParserRuleContext {
		public FilterKernel value;
		public IToken i;
		public Bool_exprContext b;
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public Filter_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_filter_def; }
	}

	[RuleVersion(0)]
	public Filter_defContext filter_def() {
		Filter_defContext _localctx = new Filter_defContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_filter_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(32);
			State = 73; _localctx.i = Match(ID);
			State = 74; Match(19);
			State = 75; _localctx.b = bool_expr();
			State = 76; Match(22);
			_localctx.value =  new FilterKernel((_localctx.i!=null?_localctx.i.Text:null), new Predicate(_localctx.b.value));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_defContext : ParserRuleContext {
		public FieldKernel value;
		public IToken p;
		public IToken a;
		public IToken b;
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GpfParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GpfParser.ID, i);
		}
		public Int_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_def; }
	}

	[RuleVersion(0)]
	public Int_defContext int_def() {
		Int_defContext _localctx = new Int_defContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_int_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(7);
			State = 80; _localctx.p = Match(ID);
			State = 81; Match(19);
			State = 82; _localctx.a = Match(ID);
			State = 83; Match(16);
			State = 84; _localctx.b = Match(ID);
			State = 85; Match(22);
			_localctx.value =  new FieldKernel((_localctx.p!=null?_localctx.p.Text:null), (_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolContext : ParserRuleContext {
		public Protocol value;
		public IToken i;
		public IntegerContext l;
		public FieldContext f;
		public SwitchContext s;
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public IReadOnlyList<FieldContext> field() {
			return GetRuleContexts<FieldContext>();
		}
		public ProtocolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_protocol; }
	}

	[RuleVersion(0)]
	public ProtocolContext protocol() {
		ProtocolContext _localctx = new ProtocolContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_protocol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(26);
			State = 89; _localctx.i = Match(ID);
			_localctx.value =  new Protocol((_localctx.i!=null?_localctx.i.Text:null));
			State = 96;
			_la = _input.La(1);
			if (_la==3) {
				{
				State = 91; Match(3);
				State = 92; _localctx.l = integer();
				State = 93; Match(1);
				_localctx.value.DefaultLength = _localctx.l.value; 
				}
			}

			State = 98; Match(12);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 99; _localctx.f = field(_localctx.value);
				_localctx.value.AddField(_localctx.f.value);
				}
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==21 );
			State = 109;
			_la = _input.La(1);
			if (_la==27) {
				{
				State = 106; _localctx.s = @switch(_localctx.value);
				_localctx.value.Switch = _localctx.s.value;
				}
			}

			State = 111; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public Protocol arg;
		public Field value;
		public IToken i;
		public Field_rangeContext r;
		public Field_filterContext f;
		public StatementContext s;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Field_rangeContext field_range() {
			return GetRuleContext<Field_rangeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public Field_filterContext field_filter(int i) {
			return GetRuleContext<Field_filterContext>(i);
		}
		public IReadOnlyList<Field_filterContext> field_filter() {
			return GetRuleContexts<Field_filterContext>();
		}
		public FieldContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FieldContext(ParserRuleContext parent, int invokingState, Protocol arg)
			: base(parent, invokingState)
		{
			this.arg = arg;
		}
		public override int GetRuleIndex() { return RULE_field; }
	}

	[RuleVersion(0)]
	public FieldContext field(Protocol arg) {
		FieldContext _localctx = new FieldContext(_ctx, State, arg);
		EnterRule(_localctx, 10, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(21);
			State = 114; _localctx.i = Match(ID);
			State = 115; Match(3);
			State = 116; _localctx.r = field_range();
			State = 117; Match(1);
			 
								_localctx.value =  new Field((_localctx.i!=null?_localctx.i.Text:null), _localctx.r.value, _localctx.arg); 
							
			State = 135;
			switch (_input.La(1)) {
			case 22:
				{
				State = 119; Match(22);
				}
				break;
			case 12:
				{
				State = 120; Match(12);
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==16) {
					{
					{
					State = 121; _localctx.f = field_filter(_localctx.value);

												_localctx.value.AddFilter(_localctx.f.value);
											
					}
					}
					State = 128;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 132;
				_la = _input.La(1);
				if (_la==18) {
					{
					State = 129; _localctx.s = statement();

												_localctx.value.SetStatement(new Statement(_localctx.arg, _localctx.s.value));
											
					}
				}

				State = 134; Match(13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_rangeContext : ParserRuleContext {
		public FieldRange value;
		public IntegerContext a;
		public IntegerContext b;
		public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public IReadOnlyList<IntegerContext> integer() {
			return GetRuleContexts<IntegerContext>();
		}
		public Field_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_field_range; }
	}

	[RuleVersion(0)]
	public Field_rangeContext field_range() {
		Field_rangeContext _localctx = new Field_rangeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_field_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; _localctx.a = integer();
			State = 138; Match(5);
			State = 139; _localctx.b = integer();

							_localctx.value =  new FieldRange(_localctx.a.value, _localctx.b.value);
						
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_filterContext : ParserRuleContext {
		public Field arg;
		public FieldFilter value;
		public IToken _ID;
		public ComparisonContext c;
		public IntegerContext i;
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public Field_filterContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Field_filterContext(ParserRuleContext parent, int invokingState, Field arg)
			: base(parent, invokingState)
		{
			this.arg = arg;
		}
		public override int GetRuleIndex() { return RULE_field_filter; }
	}

	[RuleVersion(0)]
	public Field_filterContext field_filter(Field arg) {
		Field_filterContext _localctx = new Field_filterContext(_ctx, State, arg);
		EnterRule(_localctx, 14, RULE_field_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(16);
			State = 143; _localctx._ID = Match(ID);
			State = 144; _localctx.c = comparison();
			State = 145; _localctx.i = integer();
			State = 146; Match(22);
			 
							_localctx.value =   new FieldFilter((_localctx._ID!=null?_localctx._ID.Text:null), _localctx.c.value, _localctx.i.value, _localctx.arg); 
						
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		public Protocol arg;
		public Switch value;
		public IToken i;
		public Switch_caseContext s;
		public Switch_caseContext switch_case(int i) {
			return GetRuleContext<Switch_caseContext>(i);
		}
		public IReadOnlyList<Switch_caseContext> switch_case() {
			return GetRuleContexts<Switch_caseContext>();
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public SwitchContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchContext(ParserRuleContext parent, int invokingState, Protocol arg)
			: base(parent, invokingState)
		{
			this.arg = arg;
		}
		public override int GetRuleIndex() { return RULE_switch; }
	}

	[RuleVersion(0)]
	public SwitchContext @switch(Protocol arg) {
		SwitchContext _localctx = new SwitchContext(_ctx, State, arg);
		EnterRule(_localctx, 16, RULE_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(27);
			State = 150; Match(6);
			State = 151; _localctx.i = Match(ID);
			_localctx.value =  new Switch((_localctx.i!=null?_localctx.i.Text:null), _localctx.arg);
			State = 153; Match(15);
			State = 154; Match(12);
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 155; _localctx.s = switch_case();
				_localctx.value.AddCase(_localctx.s.value);
				}
				}
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==14 );
			State = 162; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_caseContext : ParserRuleContext {
		public SwitchCase value;
		public IToken a;
		public IToken b;
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GpfParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GpfParser.ID, i);
		}
		public Switch_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_switch_case; }
	}

	[RuleVersion(0)]
	public Switch_caseContext switch_case() {
		Switch_caseContext _localctx = new Switch_caseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_switch_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(14);
			State = 165; _localctx.a = Match(ID);
			State = 166; Match(5);
			State = 167; Match(20);
			State = 168; _localctx.b = Match(ID);
			State = 169; Match(22);
			 _localctx.value =  new SwitchCase((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Expression value;
		public Int_exprContext e;
		public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(18);
			State = 173; Match(19);
			State = 174; _localctx.e = int_expr();
			State = 175; Match(22);
			 _localctx.value =  new Expression(_localctx.e.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_exprContext : ParserRuleContext {
		public OrString value;
		public Bool_andContext a;
		public Bool_andContext b;
		public Bool_andContext bool_and(int i) {
			return GetRuleContext<Bool_andContext>(i);
		}
		public IReadOnlyList<Bool_andContext> bool_and() {
			return GetRuleContexts<Bool_andContext>();
		}
		public Bool_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_expr; }
	}

	[RuleVersion(0)]
	public Bool_exprContext bool_expr() {
		Bool_exprContext _localctx = new Bool_exprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_bool_expr);
		 _localctx.value =  new OrString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; _localctx.a = bool_and();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 180; Match(24);
				State = 181; _localctx.b = bool_and();

									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 186;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==24 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_andContext : ParserRuleContext {
		public AndString value;
		public Bool_notContext a;
		public Bool_notContext b;
		public IReadOnlyList<Bool_notContext> bool_not() {
			return GetRuleContexts<Bool_notContext>();
		}
		public Bool_notContext bool_not(int i) {
			return GetRuleContext<Bool_notContext>(i);
		}
		public Bool_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_and; }
	}

	[RuleVersion(0)]
	public Bool_andContext bool_and() {
		Bool_andContext _localctx = new Bool_andContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_bool_and);
		 _localctx.value =  new AndString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; _localctx.a = bool_not();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 190; Match(23);
				State = 191; _localctx.b = bool_not();

									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==23 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_notContext : ParserRuleContext {
		public PredicateAtom value;
		public Bool_atomContext e;
		public Bool_atomContext bool_atom() {
			return GetRuleContext<Bool_atomContext>(0);
		}
		public Bool_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_not; }
	}

	[RuleVersion(0)]
	public Bool_notContext bool_not() {
		Bool_notContext _localctx = new Bool_notContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_bool_not);
		try {
			State = 205;
			switch (_input.La(1)) {
			case 33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; Match(33);
				State = 199; _localctx.e = bool_atom();
				 _localctx.value =  new NotAtom(_localctx.e.value); 
				}
				break;
			case 6:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; _localctx.e = bool_atom();
				 _localctx.value =  _localctx.e.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_atomContext : ParserRuleContext {
		public PredicateAtom value;
		public IToken a;
		public IToken b;
		public IToken c;
		public IToken i;
		public Bool_exprContext e;
		public ComparisonContext o;
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(GpfParser.INT, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GpfParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GpfParser.ID, i);
		}
		public Bool_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_atom; }
	}

	[RuleVersion(0)]
	public Bool_atomContext bool_atom() {
		Bool_atomContext _localctx = new Bool_atomContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_bool_atom);
		try {
			State = 227;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; _localctx.a = Match(ID);
				State = 208; Match(16);
				State = 209; _localctx.b = Match(ID);
				State = 210; Match(16);
				State = 211; _localctx.c = Match(ID);
				 _localctx.value =  new FilterAtom((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null), (_localctx.c!=null?_localctx.c.Text:null)); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; _localctx.i = Match(ID);
				 _localctx.value =  new ProtocolAtom((_localctx.i!=null?_localctx.i.Text:null)); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; Match(6);
				State = 216; _localctx.e = bool_expr();
				State = 217; Match(15);
				 _localctx.value =  new SubPredicateAtom(_localctx.e.value); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; _localctx.a = Match(ID);
				State = 221; Match(16);
				State = 222; _localctx.b = Match(ID);
				State = 223; _localctx.o = comparison();
				State = 224; _localctx.i = Match(INT);
				 
								//get the referenced field from the protocol library
								var tmp = ProtocolLibrary.GetField((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null));
								//construct an anonymous filter for this field
								var fieldFilter = new FieldFilter(MemoryCoordinator.GetAnonFilter(), _localctx.o.value, Convert.ToInt32((_localctx.i!=null?_localctx.i.Text:null)), tmp);
								//add the filter to the field
								tmp.AddFilter(fieldFilter);
								//reference the newly created anonymous filter
								_localctx.value =  new FilterAtom((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null), fieldFilter.ID); 
							
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_exprContext : ParserRuleContext {
		public AdditionString value;
		public Int_subContext a;
		public Int_subContext b;
		public IReadOnlyList<Int_subContext> int_sub() {
			return GetRuleContexts<Int_subContext>();
		}
		public Int_subContext int_sub(int i) {
			return GetRuleContext<Int_subContext>(i);
		}
		public Int_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_expr; }
	}

	[RuleVersion(0)]
	public Int_exprContext int_expr() {
		Int_exprContext _localctx = new Int_exprContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_int_expr);
		 _localctx.value =  new AdditionString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; _localctx.a = int_sub();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 231; Match(17);
				State = 232; _localctx.b = int_sub();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 237;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==17 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_subContext : ParserRuleContext {
		public SubtractionString value;
		public Int_multContext a;
		public Int_multContext b;
		public IReadOnlyList<Int_multContext> int_mult() {
			return GetRuleContexts<Int_multContext>();
		}
		public Int_multContext int_mult(int i) {
			return GetRuleContext<Int_multContext>(i);
		}
		public Int_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_sub; }
	}

	[RuleVersion(0)]
	public Int_subContext int_sub() {
		Int_subContext _localctx = new Int_subContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_int_sub);
		 _localctx.value =  new SubtractionString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; _localctx.a = int_mult();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 241; Match(2);
				State = 242; _localctx.b = int_mult();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 247;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==2 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_multContext : ParserRuleContext {
		public MultiplicationString value;
		public Int_divContext a;
		public Int_divContext b;
		public IReadOnlyList<Int_divContext> int_div() {
			return GetRuleContexts<Int_divContext>();
		}
		public Int_divContext int_div(int i) {
			return GetRuleContext<Int_divContext>(i);
		}
		public Int_multContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_mult; }
	}

	[RuleVersion(0)]
	public Int_multContext int_mult() {
		Int_multContext _localctx = new Int_multContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_int_mult);
		 _localctx.value =  new MultiplicationString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; _localctx.a = int_div();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 251; Match(4);
				State = 252; _localctx.b = int_div();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_divContext : ParserRuleContext {
		public DivisionString value;
		public Int_atomContext a;
		public Int_atomContext b;
		public IReadOnlyList<Int_atomContext> int_atom() {
			return GetRuleContexts<Int_atomContext>();
		}
		public Int_atomContext int_atom(int i) {
			return GetRuleContext<Int_atomContext>(i);
		}
		public Int_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_div; }
	}

	[RuleVersion(0)]
	public Int_divContext int_div() {
		Int_divContext _localctx = new Int_divContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_int_div);
		 _localctx.value =  new DivisionString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; _localctx.a = int_atom();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 261; Match(29);
				State = 262; _localctx.b = int_atom();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 267;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==29 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_atomContext : ParserRuleContext {
		public ExpressionAtom value;
		public System_registerContext r;
		public IntegerContext i;
		public Int_exprContext e;
		public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public System_registerContext system_register() {
			return GetRuleContext<System_registerContext>(0);
		}
		public Int_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_atom; }
	}

	[RuleVersion(0)]
	public Int_atomContext int_atom() {
		Int_atomContext _localctx = new Int_atomContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_int_atom);
		try {
			State = 280;
			switch (_input.La(1)) {
			case 18:
			case 28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269; _localctx.r = system_register();
				 _localctx.value =  new RegisterAtom(_localctx.r.value); 
				}
				break;
			case INT:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; _localctx.i = integer();
				 _localctx.value =  new StaticAtom(_localctx.i.value); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275; Match(6);
				State = 276; _localctx.e = int_expr();
				State = 277; Match(15);
				 _localctx.value =  new SubExpressionAtom(_localctx.e.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public Comparison value;
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_comparison; }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_comparison);
		try {
			State = 294;
			switch (_input.La(1)) {
			case 30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282; Match(30);
				_localctx.value =  Comparison.Equal;
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; Match(10);
				_localctx.value =  Comparison.NotEqual;
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; Match(8);
				_localctx.value =  Comparison.LessThan;
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 288; Match(25);
				_localctx.value =  Comparison.GreaterThan;
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 290; Match(11);
				_localctx.value =  Comparison.LessThanOrEqual;
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 6);
				{
				State = 292; Match(31);
				_localctx.value =  Comparison.GreaterThanOrEqual;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_registerContext : ParserRuleContext {
		public SystemRegister value;
		public System_registerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_system_register; }
	}

	[RuleVersion(0)]
	public System_registerContext system_register() {
		System_registerContext _localctx = new System_registerContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_system_register);
		try {
			State = 300;
			switch (_input.La(1)) {
			case 18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; Match(18);
				_localctx.value =  SystemRegister.Length;
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298; Match(28);
				_localctx.value =  SystemRegister.Value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public int value;
		public IToken a;
		public IToken b;
		public IToken c;
		public IToken d;
		public IToken _INT;
		public IToken _HEX;
		public IReadOnlyList<ITerminalNode> INT() { return GetTokens(GpfParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(GpfParser.INT, i);
		}
		public ITerminalNode HEX() { return GetToken(GpfParser.HEX, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_integer; }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_integer);
		try {
			State = 315;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; _localctx.a = Match(INT);
				State = 303; Match(16);
				State = 304; _localctx.b = Match(INT);
				State = 305; Match(16);
				State = 306; _localctx.c = Match(INT);
				State = 307; Match(16);
				State = 308; _localctx.d = Match(INT);

				                            string msg = "";
				                            int a = Convert.ToInt32((_localctx.a!=null?_localctx.a.Text:null));
				                            int b = Convert.ToInt32((_localctx.b!=null?_localctx.b.Text:null));
				                            int c = Convert.ToInt32((_localctx.c!=null?_localctx.c.Text:null));
				                            int d = Convert.ToInt32((_localctx.d!=null?_localctx.d.Text:null));
				                            
				                            if ( a < 256 && b < 256 && c < 256 && d < 256)
				                            {
				                                _localctx.value =  (a << 24) + (b << 16) + (c << 8) + d; 
				                            }
				                            else
				                            {
				                                msg += "Invalid IP address: " + a + '.' + b + '.' + c + '.' + d + "\n";
				                                _localctx.value =  0;
				                            }
				                        

				                            if (msg != "") System.Windows.Forms.MessageBox.Show(msg, "Invalid IPv4 Address Specification");
				                        
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; _localctx._INT = Match(INT);
				 _localctx.value =  Convert.ToInt32((_localctx._INT!=null?_localctx._INT.Text:null)); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 313; _localctx._HEX = Match(HEX);

								string tmp = (_localctx._HEX!=null?_localctx._HEX.Text:null);
								tmp = tmp.Substring(2); //chop off leading '0x'
								int chars = tmp.Length;
								_localctx.value =  0;		
								for (int k = 0; k < chars; k++)
								{
									_localctx.value *= 16;
									switch(tmp[k])
									{
										case '0': break;
										case '1': _localctx.value += 1; break;
										case '2': _localctx.value += 2; break;
										case '3': _localctx.value += 3; break;
										case '4': _localctx.value += 4; break;
										case '5': _localctx.value += 5; break;
										case '6': _localctx.value += 6; break;
										case '7': _localctx.value += 7; break;
										case '8': _localctx.value += 8; break;
										case '9': _localctx.value += 9; break;
										case 'a': 
										case 'A': _localctx.value += 10; break;
										case 'b': 
										case 'B': _localctx.value += 11; break;
										case 'c': 
										case 'C': _localctx.value += 12; break;
										case 'd': 
										case 'D': _localctx.value += 13; break;
										case 'e': 
										case 'E': _localctx.value += 14; break;
										case 'f': 
										case 'F': _localctx.value += 15; break;
									}
								}		
							
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\x140\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x3\x2\x3\x2\x6\x2\x34\n"+
		"\x2\r\x2\xE\x2\x35\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x6\x3\x44\n\x3\r\x3\xE\x3\x45\x3\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\x63\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x6\x6i\n\x6\r\x6\xE\x6j"+
		"\x3\x6\x3\x6\x3\x6\x5\x6p\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\x7F\n\a\f\a\xE\a\x82\v\a\x3\a\x3\a\x3"+
		"\a\x5\a\x87\n\a\x3\a\x5\a\x8A\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x6"+
		"\n\xA1\n\n\r\n\xE\n\xA2\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x6\r\xBB"+
		"\n\r\r\r\xE\r\xBC\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x6\xE\xC5\n\xE\r"+
		"\xE\xE\xE\xC6\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xD0\n\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\xE6\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\xEE"+
		"\n\x11\r\x11\xE\x11\xEF\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x6\x12"+
		"\xF8\n\x12\r\x12\xE\x12\xF9\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x6\x13\x102\n\x13\r\x13\xE\x13\x103\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x6\x14\x10C\n\x14\r\x14\xE\x14\x10D\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x11B\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x5\x16\x129\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x12F"+
		"\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x13E\n\x18\x3\x18\x2\x2\x2\x19\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x2\x2\x146\x2\x33"+
		"\x3\x2\x2\x2\x4\x39\x3\x2\x2\x2\x6J\x3\x2\x2\x2\bQ\x3\x2\x2\x2\nZ\x3\x2"+
		"\x2\x2\fs\x3\x2\x2\x2\xE\x8B\x3\x2\x2\x2\x10\x90\x3\x2\x2\x2\x12\x97\x3"+
		"\x2\x2\x2\x14\xA6\x3\x2\x2\x2\x16\xAE\x3\x2\x2\x2\x18\xB4\x3\x2\x2\x2"+
		"\x1A\xBE\x3\x2\x2\x2\x1C\xCF\x3\x2\x2\x2\x1E\xE5\x3\x2\x2\x2 \xE7\x3\x2"+
		"\x2\x2\"\xF1\x3\x2\x2\x2$\xFB\x3\x2\x2\x2&\x105\x3\x2\x2\x2(\x11A\x3\x2"+
		"\x2\x2*\x128\x3\x2\x2\x2,\x12E\x3\x2\x2\x2.\x13D\x3\x2\x2\x2\x30\x31\x5"+
		"\n\x6\x2\x31\x32\b\x2\x1\x2\x32\x34\x3\x2\x2\x2\x33\x30\x3\x2\x2\x2\x34"+
		"\x35\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x37\x3\x2"+
		"\x2\x2\x37\x38\x5\x4\x3\x2\x38\x3\x3\x2\x2\x2\x39:\a\v\x2\x2:;\a\b\x2"+
		"\x2;<\a\x11\x2\x2<\x43\a\xE\x2\x2=>\x5\x6\x4\x2>?\b\x3\x1\x2?\x44\x3\x2"+
		"\x2\x2@\x41\x5\b\x5\x2\x41\x42\b\x3\x1\x2\x42\x44\x3\x2\x2\x2\x43=\x3"+
		"\x2\x2\x2\x43@\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45"+
		"\x46\x3\x2\x2\x2\x46G\x3\x2\x2\x2GH\a\xF\x2\x2HI\b\x3\x1\x2I\x5\x3\x2"+
		"\x2\x2JK\a\"\x2\x2KL\a$\x2\x2LM\a\x15\x2\x2MN\x5\x18\r\x2NO\a\x18\x2\x2"+
		"OP\b\x4\x1\x2P\a\x3\x2\x2\x2QR\a\t\x2\x2RS\a$\x2\x2ST\a\x15\x2\x2TU\a"+
		"$\x2\x2UV\a\x12\x2\x2VW\a$\x2\x2WX\a\x18\x2\x2XY\b\x5\x1\x2Y\t\x3\x2\x2"+
		"\x2Z[\a\x1C\x2\x2[\\\a$\x2\x2\\\x62\b\x6\x1\x2]^\a\x5\x2\x2^_\x5.\x18"+
		"\x2_`\a\x3\x2\x2`\x61\b\x6\x1\x2\x61\x63\x3\x2\x2\x2\x62]\x3\x2\x2\x2"+
		"\x62\x63\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64h\a\xE\x2\x2\x65\x66\x5\f"+
		"\a\x2\x66g\b\x6\x1\x2gi\x3\x2\x2\x2h\x65\x3\x2\x2\x2ij\x3\x2\x2\x2jh\x3"+
		"\x2\x2\x2jk\x3\x2\x2\x2ko\x3\x2\x2\x2lm\x5\x12\n\x2mn\b\x6\x1\x2np\x3"+
		"\x2\x2\x2ol\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qr\a\xF\x2\x2r\v\x3"+
		"\x2\x2\x2st\a\x17\x2\x2tu\a$\x2\x2uv\a\x5\x2\x2vw\x5\xE\b\x2wx\a\x3\x2"+
		"\x2x\x89\b\a\x1\x2y\x8A\a\x18\x2\x2z\x80\a\xE\x2\x2{|\x5\x10\t\x2|}\b"+
		"\a\x1\x2}\x7F\x3\x2\x2\x2~{\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2"+
		"\x2\x2\x80\x81\x3\x2\x2\x2\x81\x86\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83"+
		"\x84\x5\x16\f\x2\x84\x85\b\a\x1\x2\x85\x87\x3\x2\x2\x2\x86\x83\x3\x2\x2"+
		"\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\a\xF\x2\x2\x89y\x3"+
		"\x2\x2\x2\x89z\x3\x2\x2\x2\x8A\r\x3\x2\x2\x2\x8B\x8C\x5.\x18\x2\x8C\x8D"+
		"\a\a\x2\x2\x8D\x8E\x5.\x18\x2\x8E\x8F\b\b\x1\x2\x8F\xF\x3\x2\x2\x2\x90"+
		"\x91\a\x12\x2\x2\x91\x92\a$\x2\x2\x92\x93\x5*\x16\x2\x93\x94\x5.\x18\x2"+
		"\x94\x95\a\x18\x2\x2\x95\x96\b\t\x1\x2\x96\x11\x3\x2\x2\x2\x97\x98\a\x1D"+
		"\x2\x2\x98\x99\a\b\x2\x2\x99\x9A\a$\x2\x2\x9A\x9B\b\n\x1\x2\x9B\x9C\a"+
		"\x11\x2\x2\x9C\xA0\a\xE\x2\x2\x9D\x9E\x5\x14\v\x2\x9E\x9F\b\n\x1\x2\x9F"+
		"\xA1\x3\x2\x2\x2\xA0\x9D\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA0\x3\x2"+
		"\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a\xF\x2\x2\xA5"+
		"\x13\x3\x2\x2\x2\xA6\xA7\a\x10\x2\x2\xA7\xA8\a$\x2\x2\xA8\xA9\a\a\x2\x2"+
		"\xA9\xAA\a\x16\x2\x2\xAA\xAB\a$\x2\x2\xAB\xAC\a\x18\x2\x2\xAC\xAD\b\v"+
		"\x1\x2\xAD\x15\x3\x2\x2\x2\xAE\xAF\a\x14\x2\x2\xAF\xB0\a\x15\x2\x2\xB0"+
		"\xB1\x5 \x11\x2\xB1\xB2\a\x18\x2\x2\xB2\xB3\b\f\x1\x2\xB3\x17\x3\x2\x2"+
		"\x2\xB4\xB5\x5\x1A\xE\x2\xB5\xBA\b\r\x1\x2\xB6\xB7\a\x1A\x2\x2\xB7\xB8"+
		"\x5\x1A\xE\x2\xB8\xB9\b\r\x1\x2\xB9\xBB\x3\x2\x2\x2\xBA\xB6\x3\x2\x2\x2"+
		"\xBB\xBC\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\x19\x3"+
		"\x2\x2\x2\xBE\xBF\x5\x1C\xF\x2\xBF\xC4\b\xE\x1\x2\xC0\xC1\a\x19\x2\x2"+
		"\xC1\xC2\x5\x1C\xF\x2\xC2\xC3\b\xE\x1\x2\xC3\xC5\x3\x2\x2\x2\xC4\xC0\x3"+
		"\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2"+
		"\xC7\x1B\x3\x2\x2\x2\xC8\xC9\a#\x2\x2\xC9\xCA\x5\x1E\x10\x2\xCA\xCB\b"+
		"\xF\x1\x2\xCB\xD0\x3\x2\x2\x2\xCC\xCD\x5\x1E\x10\x2\xCD\xCE\b\xF\x1\x2"+
		"\xCE\xD0\x3\x2\x2\x2\xCF\xC8\x3\x2\x2\x2\xCF\xCC\x3\x2\x2\x2\xD0\x1D\x3"+
		"\x2\x2\x2\xD1\xD2\a$\x2\x2\xD2\xD3\a\x12\x2\x2\xD3\xD4\a$\x2\x2\xD4\xD5"+
		"\a\x12\x2\x2\xD5\xD6\a$\x2\x2\xD6\xE6\b\x10\x1\x2\xD7\xD8\a$\x2\x2\xD8"+
		"\xE6\b\x10\x1\x2\xD9\xDA\a\b\x2\x2\xDA\xDB\x5\x18\r\x2\xDB\xDC\a\x11\x2"+
		"\x2\xDC\xDD\b\x10\x1\x2\xDD\xE6\x3\x2\x2\x2\xDE\xDF\a$\x2\x2\xDF\xE0\a"+
		"\x12\x2\x2\xE0\xE1\a$\x2\x2\xE1\xE2\x5*\x16\x2\xE2\xE3\a%\x2\x2\xE3\xE4"+
		"\b\x10\x1\x2\xE4\xE6\x3\x2\x2\x2\xE5\xD1\x3\x2\x2\x2\xE5\xD7\x3\x2\x2"+
		"\x2\xE5\xD9\x3\x2\x2\x2\xE5\xDE\x3\x2\x2\x2\xE6\x1F\x3\x2\x2\x2\xE7\xE8"+
		"\x5\"\x12\x2\xE8\xED\b\x11\x1\x2\xE9\xEA\a\x13\x2\x2\xEA\xEB\x5\"\x12"+
		"\x2\xEB\xEC\b\x11\x1\x2\xEC\xEE\x3\x2\x2\x2\xED\xE9\x3\x2\x2\x2\xEE\xEF"+
		"\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0!\x3\x2\x2\x2"+
		"\xF1\xF2\x5$\x13\x2\xF2\xF7\b\x12\x1\x2\xF3\xF4\a\x4\x2\x2\xF4\xF5\x5"+
		"$\x13\x2\xF5\xF6\b\x12\x1\x2\xF6\xF8\x3\x2\x2\x2\xF7\xF3\x3\x2\x2\x2\xF8"+
		"\xF9\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA#\x3\x2\x2"+
		"\x2\xFB\xFC\x5&\x14\x2\xFC\x101\b\x13\x1\x2\xFD\xFE\a\x6\x2\x2\xFE\xFF"+
		"\x5&\x14\x2\xFF\x100\b\x13\x1\x2\x100\x102\x3\x2\x2\x2\x101\xFD\x3\x2"+
		"\x2\x2\x102\x103\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x103\x104\x3\x2\x2"+
		"\x2\x104%\x3\x2\x2\x2\x105\x106\x5(\x15\x2\x106\x10B\b\x14\x1\x2\x107"+
		"\x108\a\x1F\x2\x2\x108\x109\x5(\x15\x2\x109\x10A\b\x14\x1\x2\x10A\x10C"+
		"\x3\x2\x2\x2\x10B\x107\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10B\x3"+
		"\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\'\x3\x2\x2\x2\x10F\x110\x5,\x17\x2"+
		"\x110\x111\b\x15\x1\x2\x111\x11B\x3\x2\x2\x2\x112\x113\x5.\x18\x2\x113"+
		"\x114\b\x15\x1\x2\x114\x11B\x3\x2\x2\x2\x115\x116\a\b\x2\x2\x116\x117"+
		"\x5 \x11\x2\x117\x118\a\x11\x2\x2\x118\x119\b\x15\x1\x2\x119\x11B\x3\x2"+
		"\x2\x2\x11A\x10F\x3\x2\x2\x2\x11A\x112\x3\x2\x2\x2\x11A\x115\x3\x2\x2"+
		"\x2\x11B)\x3\x2\x2\x2\x11C\x11D\a \x2\x2\x11D\x129\b\x16\x1\x2\x11E\x11F"+
		"\a\f\x2\x2\x11F\x129\b\x16\x1\x2\x120\x121\a\n\x2\x2\x121\x129\b\x16\x1"+
		"\x2\x122\x123\a\x1B\x2\x2\x123\x129\b\x16\x1\x2\x124\x125\a\r\x2\x2\x125"+
		"\x129\b\x16\x1\x2\x126\x127\a!\x2\x2\x127\x129\b\x16\x1\x2\x128\x11C\x3"+
		"\x2\x2\x2\x128\x11E\x3\x2\x2\x2\x128\x120\x3\x2\x2\x2\x128\x122\x3\x2"+
		"\x2\x2\x128\x124\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x129+\x3\x2\x2\x2\x12A"+
		"\x12B\a\x14\x2\x2\x12B\x12F\b\x17\x1\x2\x12C\x12D\a\x1E\x2\x2\x12D\x12F"+
		"\b\x17\x1\x2\x12E\x12A\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12F-\x3\x2\x2"+
		"\x2\x130\x131\a%\x2\x2\x131\x132\a\x12\x2\x2\x132\x133\a%\x2\x2\x133\x134"+
		"\a\x12\x2\x2\x134\x135\a%\x2\x2\x135\x136\a\x12\x2\x2\x136\x137\a%\x2"+
		"\x2\x137\x138\b\x18\x1\x2\x138\x13E\b\x18\x1\x2\x139\x13A\a%\x2\x2\x13A"+
		"\x13E\b\x18\x1\x2\x13B\x13C\a&\x2\x2\x13C\x13E\b\x18\x1\x2\x13D\x130\x3"+
		"\x2\x2\x2\x13D\x139\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13E/\x3\x2\x2\x2"+
		"\x18\x35\x43\x45\x62jo\x80\x86\x89\xA2\xBC\xC6\xCF\xE5\xEF\xF9\x103\x10D"+
		"\x11A\x128\x12E\x13D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
