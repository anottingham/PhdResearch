//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Alastair\Documents\PhD Thesis\CFVM\CaptureFoundry3\Grammar\Gpf.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {

using System;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GpfParser : Parser {
	public const int
		T__32=1, T__31=2, T__30=3, T__29=4, T__28=5, T__27=6, T__26=7, T__25=8, 
		T__24=9, T__23=10, T__22=11, T__21=12, T__20=13, T__19=14, T__18=15, T__17=16, 
		T__16=17, T__15=18, T__14=19, T__13=20, T__12=21, T__11=22, T__10=23, 
		T__9=24, T__8=25, T__7=26, T__6=27, T__5=28, T__4=29, T__3=30, T__2=31, 
		T__1=32, T__0=33, ID=34, INT=35, HEX=36, COMMENT=37, WS=38;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'-'", "'['", "'*'", "':'", "'('", "'int'", "'<'", 
		"'main'", "'!='", "'<='", "'{'", "'}'", "'case'", "')'", "'.'", "'+'", 
		"'$length'", "'='", "'goto'", "';'", "'field'", "'&&'", "'||'", "'>'", 
		"'protocol'", "'switch'", "'$value'", "'/'", "'=='", "'>='", "'filter'", 
		"'!'", "ID", "INT", "HEX", "COMMENT", "WS"
	};
	public const int
		RULE_program = 0, RULE_main = 1, RULE_filter_def = 2, RULE_int_def = 3, 
		RULE_protocol = 4, RULE_field = 5, RULE_field_range = 6, RULE_field_filter = 7, 
		RULE_switch = 8, RULE_switch_case = 9, RULE_statement = 10, RULE_bool_expr = 11, 
		RULE_bool_and = 12, RULE_bool_not = 13, RULE_bool_atom = 14, RULE_int_expr = 15, 
		RULE_int_sub = 16, RULE_int_mult = 17, RULE_int_div = 18, RULE_int_atom = 19, 
		RULE_sum_op = 20, RULE_mult_op = 21, RULE_comparison = 22, RULE_system_register = 23, 
		RULE_integer = 24;
	public static readonly string[] ruleNames = {
		"program", "main", "filter_def", "int_def", "protocol", "field", "field_range", 
		"field_filter", "switch", "switch_case", "statement", "bool_expr", "bool_and", 
		"bool_not", "bool_atom", "int_expr", "int_sub", "int_mult", "int_div", 
		"int_atom", "sum_op", "mult_op", "comparison", "system_register", "integer"
	};

	public override string GrammarFileName { get { return "Gpf.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GpfParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProtocolContext p;
		public ProtocolContext protocol(int i) {
			return GetRuleContext<ProtocolContext>(i);
		}
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public IReadOnlyList<ProtocolContext> protocol() {
			return GetRuleContexts<ProtocolContext>();
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_program; }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		ProtocolLibrary.Clear();
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 50; _localctx.p = protocol();
				ProtocolLibrary.AddProtocol(_localctx.p.value);
				}
				}
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==26 );
			State = 57; main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public Filter_defContext f;
		public Int_defContext i;
		public Filter_defContext filter_def(int i) {
			return GetRuleContext<Filter_defContext>(i);
		}
		public IReadOnlyList<Filter_defContext> filter_def() {
			return GetRuleContexts<Filter_defContext>();
		}
		public IReadOnlyList<Int_defContext> int_def() {
			return GetRuleContexts<Int_defContext>();
		}
		public Int_defContext int_def(int i) {
			return GetRuleContext<Int_defContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_main; }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(9);
			State = 60; Match(6);
			State = 61; Match(15);
			State = 62; Match(12);
			State = 69;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 69;
				switch (_input.La(1)) {
				case 32:
					{
					State = 63; _localctx.f = filter_def();
					 ProtocolLibrary.Kernels.AddKernel(_localctx.f.value);
					}
					break;
				case 7:
					{
					State = 66; _localctx.i = int_def();
					 ProtocolLibrary.Kernels.AddKernel(_localctx.i.value);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 71;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==7 || _la==32 );
			State = 73; Match(13);
			ProtocolLibrary.GenerateProgram();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_defContext : ParserRuleContext {
		public FilterKernel value;
		public IToken i;
		public Bool_exprContext b;
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public Filter_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_filter_def; }
	}

	[RuleVersion(0)]
	public Filter_defContext filter_def() {
		Filter_defContext _localctx = new Filter_defContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_filter_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(32);
			State = 77; _localctx.i = Match(ID);
			State = 78; Match(19);
			State = 79; _localctx.b = bool_expr();
			State = 80; Match(21);
			_localctx.value =  new FilterKernel((_localctx.i!=null?_localctx.i.Text:null), new Predicate(_localctx.b.value));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_defContext : ParserRuleContext {
		public FieldKernel value;
		public IToken p;
		public IToken a;
		public IToken b;
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GpfParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GpfParser.ID, i);
		}
		public Int_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_def; }
	}

	[RuleVersion(0)]
	public Int_defContext int_def() {
		Int_defContext _localctx = new Int_defContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_int_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(7);
			State = 84; _localctx.p = Match(ID);
			State = 85; Match(19);
			State = 86; _localctx.a = Match(ID);
			State = 87; Match(16);
			State = 88; _localctx.b = Match(ID);
			State = 89; Match(21);
			_localctx.value =  new FieldKernel((_localctx.p!=null?_localctx.p.Text:null), (_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolContext : ParserRuleContext {
		public Protocol value;
		public IToken i;
		public FieldContext f;
		public SwitchContext s;
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public IReadOnlyList<FieldContext> field() {
			return GetRuleContexts<FieldContext>();
		}
		public ProtocolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_protocol; }
	}

	[RuleVersion(0)]
	public ProtocolContext protocol() {
		ProtocolContext _localctx = new ProtocolContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_protocol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(26);
			State = 93; _localctx.i = Match(ID);
			_localctx.value =  new Protocol((_localctx.i!=null?_localctx.i.Text:null));
			State = 95; Match(12);
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 96; _localctx.f = field(_localctx.value);
				_localctx.value.AddField(_localctx.f.value);
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==22 );
			State = 106;
			_la = _input.La(1);
			if (_la==27) {
				{
				State = 103; _localctx.s = @switch(_localctx.value);
				_localctx.value.Switch = _localctx.s.value;
				}
			}

			State = 108; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public Protocol arg;
		public Field value;
		public IToken i;
		public Field_rangeContext r;
		public Field_filterContext f;
		public StatementContext s;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Field_rangeContext field_range() {
			return GetRuleContext<Field_rangeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public Field_filterContext field_filter(int i) {
			return GetRuleContext<Field_filterContext>(i);
		}
		public IReadOnlyList<Field_filterContext> field_filter() {
			return GetRuleContexts<Field_filterContext>();
		}
		public FieldContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FieldContext(ParserRuleContext parent, int invokingState, Protocol arg)
			: base(parent, invokingState)
		{
			this.arg = arg;
		}
		public override int GetRuleIndex() { return RULE_field; }
	}

	[RuleVersion(0)]
	public FieldContext field(Protocol arg) {
		FieldContext _localctx = new FieldContext(_ctx, State, arg);
		EnterRule(_localctx, 10, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(22);
			State = 111; _localctx.i = Match(ID);
			State = 112; Match(3);
			State = 113; _localctx.r = field_range();
			State = 114; Match(1);
			 
								_localctx.value =  new Field((_localctx.i!=null?_localctx.i.Text:null), _localctx.r.value, _localctx.arg); 
							
			State = 132;
			switch (_input.La(1)) {
			case 21:
				{
				State = 116; Match(21);
				}
				break;
			case 12:
				{
				State = 117; Match(12);
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 118; _localctx.f = field_filter(_localctx.value);

												_localctx.value.AddFilter(_localctx.f.value);
											
					}
					}
					State = 123;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==16 );
				State = 128;
				_la = _input.La(1);
				if (_la==18) {
					{
					State = 125; _localctx.s = statement();

												_localctx.value.SetStatement(new Statement(_localctx.arg, _localctx.s.value));
											
					}
				}

				State = 130; Match(13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_rangeContext : ParserRuleContext {
		public FieldRange value;
		public IntegerContext a;
		public IntegerContext b;
		public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public IReadOnlyList<IntegerContext> integer() {
			return GetRuleContexts<IntegerContext>();
		}
		public Field_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_field_range; }
	}

	[RuleVersion(0)]
	public Field_rangeContext field_range() {
		Field_rangeContext _localctx = new Field_rangeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_field_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; _localctx.a = integer();
			State = 135; Match(5);
			State = 136; _localctx.b = integer();

							_localctx.value =  new FieldRange(_localctx.a.value, _localctx.b.value);
						
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_filterContext : ParserRuleContext {
		public Field arg;
		public FieldFilter value;
		public IToken _ID;
		public ComparisonContext c;
		public IntegerContext i;
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public Field_filterContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Field_filterContext(ParserRuleContext parent, int invokingState, Field arg)
			: base(parent, invokingState)
		{
			this.arg = arg;
		}
		public override int GetRuleIndex() { return RULE_field_filter; }
	}

	[RuleVersion(0)]
	public Field_filterContext field_filter(Field arg) {
		Field_filterContext _localctx = new Field_filterContext(_ctx, State, arg);
		EnterRule(_localctx, 14, RULE_field_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(16);
			State = 140; _localctx._ID = Match(ID);
			State = 141; _localctx.c = comparison();
			State = 142; _localctx.i = integer();
			State = 143; Match(21);
			 
							_localctx.value =   new FieldFilter((_localctx._ID!=null?_localctx._ID.Text:null), _localctx.c.value, _localctx.i.value, _localctx.arg); 
						
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		public Protocol arg;
		public Switch value;
		public IToken i;
		public Switch_caseContext s;
		public Switch_caseContext switch_case(int i) {
			return GetRuleContext<Switch_caseContext>(i);
		}
		public IReadOnlyList<Switch_caseContext> switch_case() {
			return GetRuleContexts<Switch_caseContext>();
		}
		public ITerminalNode ID() { return GetToken(GpfParser.ID, 0); }
		public SwitchContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public SwitchContext(ParserRuleContext parent, int invokingState, Protocol arg)
			: base(parent, invokingState)
		{
			this.arg = arg;
		}
		public override int GetRuleIndex() { return RULE_switch; }
	}

	[RuleVersion(0)]
	public SwitchContext @switch(Protocol arg) {
		SwitchContext _localctx = new SwitchContext(_ctx, State, arg);
		EnterRule(_localctx, 16, RULE_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(27);
			State = 147; Match(6);
			State = 148; _localctx.i = Match(ID);
			_localctx.value =  new Switch((_localctx.i!=null?_localctx.i.Text:null), _localctx.arg);
			State = 150; Match(15);
			State = 151; Match(12);
			State = 155;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 152; _localctx.s = switch_case();
				_localctx.value.AddCase(_localctx.s.value);
				}
				}
				State = 157;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==14 );
			State = 159; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_caseContext : ParserRuleContext {
		public SwitchCase value;
		public IToken a;
		public IToken b;
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GpfParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GpfParser.ID, i);
		}
		public Switch_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_switch_case; }
	}

	[RuleVersion(0)]
	public Switch_caseContext switch_case() {
		Switch_caseContext _localctx = new Switch_caseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_switch_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(14);
			State = 162; _localctx.a = Match(ID);
			State = 163; Match(5);
			State = 164; Match(20);
			State = 165; _localctx.b = Match(ID);
			State = 166; Match(21);
			 _localctx.value =  new SwitchCase((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Expression value;
		public Int_exprContext e;
		public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(18);
			State = 170; Match(19);
			State = 171; _localctx.e = int_expr();
			State = 172; Match(21);
			 _localctx.value =  new Expression(_localctx.e.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_exprContext : ParserRuleContext {
		public OrString value;
		public Bool_andContext a;
		public Bool_andContext b;
		public Bool_andContext bool_and(int i) {
			return GetRuleContext<Bool_andContext>(i);
		}
		public IReadOnlyList<Bool_andContext> bool_and() {
			return GetRuleContexts<Bool_andContext>();
		}
		public Bool_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_expr; }
	}

	[RuleVersion(0)]
	public Bool_exprContext bool_expr() {
		Bool_exprContext _localctx = new Bool_exprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_bool_expr);
		 _localctx.value =  new OrString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; _localctx.a = bool_and();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 181;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 177; Match(24);
				State = 178; _localctx.b = bool_and();

									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 183;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==24 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_andContext : ParserRuleContext {
		public AndString value;
		public Bool_notContext a;
		public Bool_notContext b;
		public IReadOnlyList<Bool_notContext> bool_not() {
			return GetRuleContexts<Bool_notContext>();
		}
		public Bool_notContext bool_not(int i) {
			return GetRuleContext<Bool_notContext>(i);
		}
		public Bool_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_and; }
	}

	[RuleVersion(0)]
	public Bool_andContext bool_and() {
		Bool_andContext _localctx = new Bool_andContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_bool_and);
		 _localctx.value =  new AndString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; _localctx.a = bool_not();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 187; Match(23);
				State = 188; _localctx.b = bool_not();

									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 193;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==23 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_notContext : ParserRuleContext {
		public PredicateAtom value;
		public Bool_atomContext e;
		public Bool_atomContext bool_atom() {
			return GetRuleContext<Bool_atomContext>(0);
		}
		public Bool_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_not; }
	}

	[RuleVersion(0)]
	public Bool_notContext bool_not() {
		Bool_notContext _localctx = new Bool_notContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_bool_not);
		try {
			State = 202;
			switch (_input.La(1)) {
			case 33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; Match(33);
				State = 196; _localctx.e = bool_atom();
				 _localctx.value =  new NotAtom(_localctx.e.value); 
				}
				break;
			case 6:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; _localctx.e = bool_atom();
				 _localctx.value =  _localctx.e.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_atomContext : ParserRuleContext {
		public PredicateAtom value;
		public IToken a;
		public IToken b;
		public IToken c;
		public IToken i;
		public Bool_exprContext e;
		public ComparisonContext o;
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(GpfParser.INT, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GpfParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GpfParser.ID, i);
		}
		public Bool_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_bool_atom; }
	}

	[RuleVersion(0)]
	public Bool_atomContext bool_atom() {
		Bool_atomContext _localctx = new Bool_atomContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_bool_atom);
		try {
			State = 224;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; _localctx.a = Match(ID);
				State = 205; Match(16);
				State = 206; _localctx.b = Match(ID);
				State = 207; Match(16);
				State = 208; _localctx.c = Match(ID);
				 _localctx.value =  new FilterAtom((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null), (_localctx.c!=null?_localctx.c.Text:null)); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; _localctx.i = Match(ID);
				 _localctx.value =  new ProtocolAtom((_localctx.i!=null?_localctx.i.Text:null)); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212; Match(6);
				State = 213; _localctx.e = bool_expr();
				State = 214; Match(15);
				 _localctx.value =  new SubPredicateAtom(_localctx.e.value); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; _localctx.a = Match(ID);
				State = 218; Match(16);
				State = 219; _localctx.b = Match(ID);
				State = 220; _localctx.o = comparison();
				State = 221; _localctx.i = Match(INT);
				 
								//get the referenced field from the protocol library
								var tmp = ProtocolLibrary.GetField((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null));
								//construct an anonymous filter for this field
								var fieldFilter = new FieldFilter(MemoryCoordinator.GetAnonFilter(), _localctx.o.value, Convert.ToInt32((_localctx.i!=null?_localctx.i.Text:null)), tmp);
								//add the filter to the field
								tmp.AddFilter(fieldFilter);
								//reference the newly created anonymous filter
								_localctx.value =  new FilterAtom((_localctx.a!=null?_localctx.a.Text:null), (_localctx.b!=null?_localctx.b.Text:null), fieldFilter.ID); 
							
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_exprContext : ParserRuleContext {
		public AdditionString value;
		public Int_subContext a;
		public Int_subContext b;
		public IReadOnlyList<Int_subContext> int_sub() {
			return GetRuleContexts<Int_subContext>();
		}
		public Int_subContext int_sub(int i) {
			return GetRuleContext<Int_subContext>(i);
		}
		public Int_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_expr; }
	}

	[RuleVersion(0)]
	public Int_exprContext int_expr() {
		Int_exprContext _localctx = new Int_exprContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_int_expr);
		 _localctx.value =  new AdditionString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; _localctx.a = int_sub();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 232;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 228; Match(17);
				State = 229; _localctx.b = int_sub();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 234;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==17 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_subContext : ParserRuleContext {
		public SubtractionString value;
		public Int_multContext a;
		public Int_multContext b;
		public IReadOnlyList<Int_multContext> int_mult() {
			return GetRuleContexts<Int_multContext>();
		}
		public Int_multContext int_mult(int i) {
			return GetRuleContext<Int_multContext>(i);
		}
		public Int_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_sub; }
	}

	[RuleVersion(0)]
	public Int_subContext int_sub() {
		Int_subContext _localctx = new Int_subContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_int_sub);
		 _localctx.value =  new SubtractionString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; _localctx.a = int_mult();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 238; Match(2);
				State = 239; _localctx.b = int_mult();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 244;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==2 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_multContext : ParserRuleContext {
		public MultiplicationString value;
		public Int_divContext a;
		public Int_divContext b;
		public IReadOnlyList<Int_divContext> int_div() {
			return GetRuleContexts<Int_divContext>();
		}
		public Int_divContext int_div(int i) {
			return GetRuleContext<Int_divContext>(i);
		}
		public Int_multContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_mult; }
	}

	[RuleVersion(0)]
	public Int_multContext int_mult() {
		Int_multContext _localctx = new Int_multContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_int_mult);
		 _localctx.value =  new MultiplicationString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; _localctx.a = int_div();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 248; Match(4);
				State = 249; _localctx.b = int_div();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 254;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_divContext : ParserRuleContext {
		public DivisionString value;
		public Int_atomContext a;
		public Int_atomContext b;
		public IReadOnlyList<Int_atomContext> int_atom() {
			return GetRuleContexts<Int_atomContext>();
		}
		public Int_atomContext int_atom(int i) {
			return GetRuleContext<Int_atomContext>(i);
		}
		public Int_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_div; }
	}

	[RuleVersion(0)]
	public Int_divContext int_div() {
		Int_divContext _localctx = new Int_divContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_int_div);
		 _localctx.value =  new DivisionString(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; _localctx.a = int_atom();

							_localctx.value.AddElement(_localctx.a.value);
						
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 258; Match(29);
				State = 259; _localctx.b = int_atom();
				 
									_localctx.value.AddElement(_localctx.b.value);
								
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==29 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_atomContext : ParserRuleContext {
		public ExpressionAtom value;
		public System_registerContext r;
		public IntegerContext i;
		public Int_exprContext e;
		public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public System_registerContext system_register() {
			return GetRuleContext<System_registerContext>(0);
		}
		public Int_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_int_atom; }
	}

	[RuleVersion(0)]
	public Int_atomContext int_atom() {
		Int_atomContext _localctx = new Int_atomContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_int_atom);
		try {
			State = 277;
			switch (_input.La(1)) {
			case 18:
			case 28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266; _localctx.r = system_register();
				 _localctx.value =  new RegisterAtom(_localctx.r.value); 
				}
				break;
			case INT:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; _localctx.i = integer();
				 _localctx.value =  new StaticAtom(_localctx.i.value); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; Match(6);
				State = 273; _localctx.e = int_expr();
				State = 274; Match(15);
				 _localctx.value =  new SubExpressionAtom(_localctx.e.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sum_opContext : ParserRuleContext {
		public MathOperator value;
		public Sum_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sum_op; }
	}

	[RuleVersion(0)]
	public Sum_opContext sum_op() {
		Sum_opContext _localctx = new Sum_opContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_sum_op);
		try {
			State = 283;
			switch (_input.La(1)) {
			case 17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; Match(17);
				_localctx.value =  MathOperator.Add; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; Match(2);
				_localctx.value =  MathOperator.Subtract; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_opContext : ParserRuleContext {
		public MathOperator value;
		public Mult_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_mult_op; }
	}

	[RuleVersion(0)]
	public Mult_opContext mult_op() {
		Mult_opContext _localctx = new Mult_opContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_mult_op);
		try {
			State = 289;
			switch (_input.La(1)) {
			case 4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285; Match(4);
				_localctx.value =  MathOperator.Multiply; 
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; Match(29);
				_localctx.value =  MathOperator.Divide; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public Comparison value;
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_comparison; }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_comparison);
		try {
			State = 303;
			switch (_input.La(1)) {
			case 30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; Match(30);
				_localctx.value =  Comparison.Equal;
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; Match(10);
				_localctx.value =  Comparison.NotEqual;
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 295; Match(8);
				_localctx.value =  Comparison.LessThan;
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 297; Match(25);
				_localctx.value =  Comparison.GreaterThan;
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 299; Match(11);
				_localctx.value =  Comparison.LessThanOrEqual;
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 6);
				{
				State = 301; Match(31);
				_localctx.value =  Comparison.GreaterThanOrEqual;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_registerContext : ParserRuleContext {
		public SystemRegister value;
		public System_registerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_system_register; }
	}

	[RuleVersion(0)]
	public System_registerContext system_register() {
		System_registerContext _localctx = new System_registerContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_system_register);
		try {
			State = 309;
			switch (_input.La(1)) {
			case 18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; Match(18);
				_localctx.value =  SystemRegister.Length;
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307; Match(28);
				_localctx.value =  SystemRegister.Value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public int value;
		public IToken _INT;
		public IToken _HEX;
		public ITerminalNode INT() { return GetToken(GpfParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(GpfParser.HEX, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_integer; }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_integer);
		try {
			State = 315;
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; _localctx._INT = Match(INT);
				 _localctx.value =  Convert.ToInt32((_localctx._INT!=null?_localctx._INT.Text:null)); 
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; _localctx._HEX = Match(HEX);

								string tmp = (_localctx._HEX!=null?_localctx._HEX.Text:null);
								tmp = tmp.Substring(2); //chop off leading '0x'
								int chars = tmp.Length;
								_localctx.value =  0;		
								for (int k = 0; k < chars; k++)
								{
									_localctx.value *= 16;
									switch(tmp[k])
									{
										case '0': break;
										case '1': _localctx.value += 1; break;
										case '2': _localctx.value += 2; break;
										case '3': _localctx.value += 3; break;
										case '4': _localctx.value += 4; break;
										case '5': _localctx.value += 5; break;
										case '6': _localctx.value += 6; break;
										case '7': _localctx.value += 7; break;
										case '8': _localctx.value += 8; break;
										case '9': _localctx.value += 9; break;
										case 'a': 
										case 'A': _localctx.value += 10; break;
										case 'b': 
										case 'B': _localctx.value += 11; break;
										case 'c': 
										case 'C': _localctx.value += 12; break;
										case 'd': 
										case 'D': _localctx.value += 13; break;
										case 'e': 
										case 'E': _localctx.value += 14; break;
										case 'f': 
										case 'F': _localctx.value += 15; break;
									}
								}		
							
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\x140\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x3\x2"+
		"\x3\x2\x3\x2\x6\x2\x38\n\x2\r\x2\xE\x2\x39\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3H\n\x3\r\x3\xE\x3I"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x6\x6\x66\n\x6\r\x6\xE\x6g\x3\x6\x3\x6\x3\x6\x5\x6"+
		"m\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x6\a|\n\a\r\a\xE\a}\x3\a\x3\a\x3\a\x5\a\x83\n\a\x3\a\x3\a\x5\a\x87"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x6\n\x9E\n\n\r\n\xE\n\x9F\x3"+
		"\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x6\r\xB8\n\r\r\r\xE\r\xB9\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x6\xE\xC2\n\xE\r\xE\xE\xE\xC3\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xCD\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xE3\n\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\xEB\n\x11\r\x11\xE\x11"+
		"\xEC\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x6\x12\xF5\n\x12\r\x12"+
		"\xE\x12\xF6\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x6\x13\xFF\n\x13"+
		"\r\x13\xE\x13\x100\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x6\x14\x109"+
		"\n\x14\r\x14\xE\x14\x10A\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x118\n\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x11E\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x124\n\x17"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x132\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x138"+
		"\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x13E\n\x1A\x3\x1A\x2\x2\x2\x1B"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x2\x2\x144\x2\x37\x3\x2\x2\x2\x4=\x3\x2\x2\x2\x6N\x3\x2\x2\x2\bU\x3\x2"+
		"\x2\x2\n^\x3\x2\x2\x2\fp\x3\x2\x2\x2\xE\x88\x3\x2\x2\x2\x10\x8D\x3\x2"+
		"\x2\x2\x12\x94\x3\x2\x2\x2\x14\xA3\x3\x2\x2\x2\x16\xAB\x3\x2\x2\x2\x18"+
		"\xB1\x3\x2\x2\x2\x1A\xBB\x3\x2\x2\x2\x1C\xCC\x3\x2\x2\x2\x1E\xE2\x3\x2"+
		"\x2\x2 \xE4\x3\x2\x2\x2\"\xEE\x3\x2\x2\x2$\xF8\x3\x2\x2\x2&\x102\x3\x2"+
		"\x2\x2(\x117\x3\x2\x2\x2*\x11D\x3\x2\x2\x2,\x123\x3\x2\x2\x2.\x131\x3"+
		"\x2\x2\x2\x30\x137\x3\x2\x2\x2\x32\x13D\x3\x2\x2\x2\x34\x35\x5\n\x6\x2"+
		"\x35\x36\b\x2\x1\x2\x36\x38\x3\x2\x2\x2\x37\x34\x3\x2\x2\x2\x38\x39\x3"+
		"\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:;\x3\x2\x2\x2;<\x5\x4\x3"+
		"\x2<\x3\x3\x2\x2\x2=>\a\v\x2\x2>?\a\b\x2\x2?@\a\x11\x2\x2@G\a\xE\x2\x2"+
		"\x41\x42\x5\x6\x4\x2\x42\x43\b\x3\x1\x2\x43H\x3\x2\x2\x2\x44\x45\x5\b"+
		"\x5\x2\x45\x46\b\x3\x1\x2\x46H\x3\x2\x2\x2G\x41\x3\x2\x2\x2G\x44\x3\x2"+
		"\x2\x2HI\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JK\x3\x2\x2\x2KL\a\xF"+
		"\x2\x2LM\b\x3\x1\x2M\x5\x3\x2\x2\x2NO\a\"\x2\x2OP\a$\x2\x2PQ\a\x15\x2"+
		"\x2QR\x5\x18\r\x2RS\a\x17\x2\x2ST\b\x4\x1\x2T\a\x3\x2\x2\x2UV\a\t\x2\x2"+
		"VW\a$\x2\x2WX\a\x15\x2\x2XY\a$\x2\x2YZ\a\x12\x2\x2Z[\a$\x2\x2[\\\a\x17"+
		"\x2\x2\\]\b\x5\x1\x2]\t\x3\x2\x2\x2^_\a\x1C\x2\x2_`\a$\x2\x2`\x61\b\x6"+
		"\x1\x2\x61\x65\a\xE\x2\x2\x62\x63\x5\f\a\x2\x63\x64\b\x6\x1\x2\x64\x66"+
		"\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3"+
		"\x2\x2\x2hl\x3\x2\x2\x2ij\x5\x12\n\x2jk\b\x6\x1\x2km\x3\x2\x2\x2li\x3"+
		"\x2\x2\x2lm\x3\x2\x2\x2mn\x3\x2\x2\x2no\a\xF\x2\x2o\v\x3\x2\x2\x2pq\a"+
		"\x18\x2\x2qr\a$\x2\x2rs\a\x5\x2\x2st\x5\xE\b\x2tu\a\x3\x2\x2u\x86\b\a"+
		"\x1\x2v\x87\a\x17\x2\x2w{\a\xE\x2\x2xy\x5\x10\t\x2yz\b\a\x1\x2z|\x3\x2"+
		"\x2\x2{x\x3\x2\x2\x2|}\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x82\x3"+
		"\x2\x2\x2\x7F\x80\x5\x16\f\x2\x80\x81\b\a\x1\x2\x81\x83\x3\x2\x2\x2\x82"+
		"\x7F\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\a\xF"+
		"\x2\x2\x85\x87\x3\x2\x2\x2\x86v\x3\x2\x2\x2\x86w\x3\x2\x2\x2\x87\r\x3"+
		"\x2\x2\x2\x88\x89\x5\x32\x1A\x2\x89\x8A\a\a\x2\x2\x8A\x8B\x5\x32\x1A\x2"+
		"\x8B\x8C\b\b\x1\x2\x8C\xF\x3\x2\x2\x2\x8D\x8E\a\x12\x2\x2\x8E\x8F\a$\x2"+
		"\x2\x8F\x90\x5.\x18\x2\x90\x91\x5\x32\x1A\x2\x91\x92\a\x17\x2\x2\x92\x93"+
		"\b\t\x1\x2\x93\x11\x3\x2\x2\x2\x94\x95\a\x1D\x2\x2\x95\x96\a\b\x2\x2\x96"+
		"\x97\a$\x2\x2\x97\x98\b\n\x1\x2\x98\x99\a\x11\x2\x2\x99\x9D\a\xE\x2\x2"+
		"\x9A\x9B\x5\x14\v\x2\x9B\x9C\b\n\x1\x2\x9C\x9E\x3\x2\x2\x2\x9D\x9A\x3"+
		"\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2"+
		"\xA0\xA1\x3\x2\x2\x2\xA1\xA2\a\xF\x2\x2\xA2\x13\x3\x2\x2\x2\xA3\xA4\a"+
		"\x10\x2\x2\xA4\xA5\a$\x2\x2\xA5\xA6\a\a\x2\x2\xA6\xA7\a\x16\x2\x2\xA7"+
		"\xA8\a$\x2\x2\xA8\xA9\a\x17\x2\x2\xA9\xAA\b\v\x1\x2\xAA\x15\x3\x2\x2\x2"+
		"\xAB\xAC\a\x14\x2\x2\xAC\xAD\a\x15\x2\x2\xAD\xAE\x5 \x11\x2\xAE\xAF\a"+
		"\x17\x2\x2\xAF\xB0\b\f\x1\x2\xB0\x17\x3\x2\x2\x2\xB1\xB2\x5\x1A\xE\x2"+
		"\xB2\xB7\b\r\x1\x2\xB3\xB4\a\x1A\x2\x2\xB4\xB5\x5\x1A\xE\x2\xB5\xB6\b"+
		"\r\x1\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB3\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9"+
		"\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\x19\x3\x2\x2\x2\xBB\xBC\x5\x1C"+
		"\xF\x2\xBC\xC1\b\xE\x1\x2\xBD\xBE\a\x19\x2\x2\xBE\xBF\x5\x1C\xF\x2\xBF"+
		"\xC0\b\xE\x1\x2\xC0\xC2\x3\x2\x2\x2\xC1\xBD\x3\x2\x2\x2\xC2\xC3\x3\x2"+
		"\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\x1B\x3\x2\x2\x2\xC5"+
		"\xC6\a#\x2\x2\xC6\xC7\x5\x1E\x10\x2\xC7\xC8\b\xF\x1\x2\xC8\xCD\x3\x2\x2"+
		"\x2\xC9\xCA\x5\x1E\x10\x2\xCA\xCB\b\xF\x1\x2\xCB\xCD\x3\x2\x2\x2\xCC\xC5"+
		"\x3\x2\x2\x2\xCC\xC9\x3\x2\x2\x2\xCD\x1D\x3\x2\x2\x2\xCE\xCF\a$\x2\x2"+
		"\xCF\xD0\a\x12\x2\x2\xD0\xD1\a$\x2\x2\xD1\xD2\a\x12\x2\x2\xD2\xD3\a$\x2"+
		"\x2\xD3\xE3\b\x10\x1\x2\xD4\xD5\a$\x2\x2\xD5\xE3\b\x10\x1\x2\xD6\xD7\a"+
		"\b\x2\x2\xD7\xD8\x5\x18\r\x2\xD8\xD9\a\x11\x2\x2\xD9\xDA\b\x10\x1\x2\xDA"+
		"\xE3\x3\x2\x2\x2\xDB\xDC\a$\x2\x2\xDC\xDD\a\x12\x2\x2\xDD\xDE\a$\x2\x2"+
		"\xDE\xDF\x5.\x18\x2\xDF\xE0\a%\x2\x2\xE0\xE1\b\x10\x1\x2\xE1\xE3\x3\x2"+
		"\x2\x2\xE2\xCE\x3\x2\x2\x2\xE2\xD4\x3\x2\x2\x2\xE2\xD6\x3\x2\x2\x2\xE2"+
		"\xDB\x3\x2\x2\x2\xE3\x1F\x3\x2\x2\x2\xE4\xE5\x5\"\x12\x2\xE5\xEA\b\x11"+
		"\x1\x2\xE6\xE7\a\x13\x2\x2\xE7\xE8\x5\"\x12\x2\xE8\xE9\b\x11\x1\x2\xE9"+
		"\xEB\x3\x2\x2\x2\xEA\xE6\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEA\x3\x2"+
		"\x2\x2\xEC\xED\x3\x2\x2\x2\xED!\x3\x2\x2\x2\xEE\xEF\x5$\x13\x2\xEF\xF4"+
		"\b\x12\x1\x2\xF0\xF1\a\x4\x2\x2\xF1\xF2\x5$\x13\x2\xF2\xF3\b\x12\x1\x2"+
		"\xF3\xF5\x3\x2\x2\x2\xF4\xF0\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF4\x3"+
		"\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7#\x3\x2\x2\x2\xF8\xF9\x5&\x14\x2\xF9"+
		"\xFE\b\x13\x1\x2\xFA\xFB\a\x6\x2\x2\xFB\xFC\x5&\x14\x2\xFC\xFD\b\x13\x1"+
		"\x2\xFD\xFF\x3\x2\x2\x2\xFE\xFA\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101%\x3\x2\x2\x2\x102\x103\x5"+
		"(\x15\x2\x103\x108\b\x14\x1\x2\x104\x105\a\x1F\x2\x2\x105\x106\x5(\x15"+
		"\x2\x106\x107\b\x14\x1\x2\x107\x109\x3\x2\x2\x2\x108\x104\x3\x2\x2\x2"+
		"\x109\x10A\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B"+
		"\'\x3\x2\x2\x2\x10C\x10D\x5\x30\x19\x2\x10D\x10E\b\x15\x1\x2\x10E\x118"+
		"\x3\x2\x2\x2\x10F\x110\x5\x32\x1A\x2\x110\x111\b\x15\x1\x2\x111\x118\x3"+
		"\x2\x2\x2\x112\x113\a\b\x2\x2\x113\x114\x5 \x11\x2\x114\x115\a\x11\x2"+
		"\x2\x115\x116\b\x15\x1\x2\x116\x118\x3\x2\x2\x2\x117\x10C\x3\x2\x2\x2"+
		"\x117\x10F\x3\x2\x2\x2\x117\x112\x3\x2\x2\x2\x118)\x3\x2\x2\x2\x119\x11A"+
		"\a\x13\x2\x2\x11A\x11E\b\x16\x1\x2\x11B\x11C\a\x4\x2\x2\x11C\x11E\b\x16"+
		"\x1\x2\x11D\x119\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11E+\x3\x2\x2\x2\x11F"+
		"\x120\a\x6\x2\x2\x120\x124\b\x17\x1\x2\x121\x122\a\x1F\x2\x2\x122\x124"+
		"\b\x17\x1\x2\x123\x11F\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124-\x3\x2\x2"+
		"\x2\x125\x126\a \x2\x2\x126\x132\b\x18\x1\x2\x127\x128\a\f\x2\x2\x128"+
		"\x132\b\x18\x1\x2\x129\x12A\a\n\x2\x2\x12A\x132\b\x18\x1\x2\x12B\x12C"+
		"\a\x1B\x2\x2\x12C\x132\b\x18\x1\x2\x12D\x12E\a\r\x2\x2\x12E\x132\b\x18"+
		"\x1\x2\x12F\x130\a!\x2\x2\x130\x132\b\x18\x1\x2\x131\x125\x3\x2\x2\x2"+
		"\x131\x127\x3\x2\x2\x2\x131\x129\x3\x2\x2\x2\x131\x12B\x3\x2\x2\x2\x131"+
		"\x12D\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x132/\x3\x2\x2\x2\x133\x134\a"+
		"\x14\x2\x2\x134\x138\b\x19\x1\x2\x135\x136\a\x1E\x2\x2\x136\x138\b\x19"+
		"\x1\x2\x137\x133\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x138\x31\x3\x2\x2\x2"+
		"\x139\x13A\a%\x2\x2\x13A\x13E\b\x1A\x1\x2\x13B\x13C\a&\x2\x2\x13C\x13E"+
		"\b\x1A\x1\x2\x13D\x139\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13E\x33\x3\x2"+
		"\x2\x2\x19\x39GIgl}\x82\x86\x9F\xB9\xC3\xCC\xE2\xEC\xF6\x100\x10A\x117"+
		"\x11D\x123\x131\x137\x13D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
